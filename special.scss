@mixin CSSarrow ($top, $leftOrRight, $x, $color: $orange, $size: 8px) {
  position: relative;
  &:before {
    @include transform(rotate(45deg));
    background-color: $color;
    content: '';
    height: $size;
    @if $leftOrRight == left {
      left: $x;
    } @else if $leftOrRight == right {
      right: $x;
    }
    position: absolute;
    top: $top;
    width: $size;
  }
}

@mixin fadedGray {
  filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale"); // Firefox
  filter: gray alpha(opacity=40); // IE 6-9
  -webkit-filter: grayscale(90%);
  opacity: 0.4;
  zoom: 1;
}

@mixin rings ($borderWidth: 16px, $gap: 8px, $color: $inactive, $minSize: 130px, $numRings: 8) {
  [class^='ring-'] {
    @include borderRadius(50%);
    border: $borderWidth solid $color;
    left: -$borderWidth;
    position: absolute;
  }
  @for $i from 1 through $numRings {
    .ring-#{$i} {
      $size: $minSize + ($i * $borderWidth) - $borderWidth + ($i * ($borderWidth * 2)) - ($borderWidth * 2);
      $top: (($borderWidth + $gap) * $numRings) - (($borderWidth + $gap) * $i);

      height: $size;
      margin-left: -($size / 2);
      top: $top;
      width: $size;
    }
  }
}
